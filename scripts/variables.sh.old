
#!/usr/bin/env bash

HIDE_WARNINGS=${HIDE_WARNINGS:-0}

set -e # abort on error
set -u # abort on undefined variable

# disable '-x' because it is too verbose for this script
# and is not useful for for this script
if [[ $- == *x* ]]; then
  was_x_set=1
else
  was_x_set=0
fi
set +x

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

PROJECT_DIR=~/Ezmeral/532-0922/hcp-demo-env-orock-terraform
#echo PROJECT_DIR=$PROJECT_DIR
[ "$PROJECT_DIR" ] || ( echo "ERROR: PROJECT_DIR is empty" && exit 1 )

LOG_FILE="${PROJECT_DIR}"/generated/ezmeral_install_output.txt
[[ -f "$LOG_FILE" ]] && mv -f "$LOG_FILE" "${LOG_FILE}".oldA

USER=jaideep.joshi

PROJECT_ID=jai-ecp
[ "PROJECT_ID" ] || ( echo "ERROR: PROJECT_ID is empty" && exit 1 )

LOCAL_SSH_PUB_KEY_PATH=./generated/controller.pub_key
LOCAL_SSH_PRV_KEY_PATH=./generated/controller.prv_key

[ "$LOCAL_SSH_PUB_KEY_PATH" ] || ( echo "ERROR: LOCAL_SSH_PUB_KEY_PATH is empty" && exit 1 )
[ "$LOCAL_SSH_PRV_KEY_PATH" ] || ( echo "ERROR: LOCAL_SSH_PRV_KEY_PATH is empty" && exit 1 )

INSTALL_WITH_SSL=False
EMBEDDED_DF=False

CA_KEY=./generated/ca-key.pem
CA_CERT=./generated/ca-cert.pem
[ "$CA_KEY" ] || ( echo "ERROR: CA_KEY is empty" && exit 1 )
[ "$CA_CERT" ] || ( echo "ERROR: CA_CERT is empty" && exit 1 )

CTRL_INSTANCE_ID=`nova list |grep controller | awk '{print $1}'`
CTRL_PRV_IP=$(nova list |grep controller | awk '{ split($12, v, "="); print v[2]}')
CTRL_PUB_IP=$(nova list |grep controller | awk '{ split($12, v, "="); print v[2]}')
CTRL_PRV_DNS=$(nova list |grep controller | awk '{ split($12, v, "="); print $4".demo.com"}')
CTRL_PUB_DNS=$(nova list |grep controller | awk '{ split($12, v, "="); print $4".demo.com"}')
CTRL_PUB_HOST=$(nova list |grep controller | awk '{ split($12, v, "="); print $4".demo.com"}')
CTRL_PRV_HOST=$(nova list |grep controller | awk '{ split($12, v, "="); print $4".demo.com"}')
#echo CTRL_PRV_IP=$CTRL_PRV_IP
#echo CTRL_PUB_IP=$CTRL_PUB_IP
#echo CTRL_PRV_DNS=$CTRL_PRV_DNS
#echo CTRL_PUB_DNS=$CTRL_PUB_DNS
#echo CTRL_PUB_HOST=$CTRL_PUB_HOST
#echo CTRL_PRV_HOST=$CTRL_PRV_HOST

GATW_INSTANCE_ID=`nova list |grep gateway | awk '{print $1}'`
GATW_PRV_IP=$(nova list |grep gateway | awk '{ split($12, v, "="); print v[2]}')
GATW_PUB_IP=$(nova list |grep gateway | awk '{ split($12, v, "="); print v[2]}')
GATW_PRV_DNS=$(nova list |grep gateway | awk '{ split($12, v, "="); print $4".demo.com"}')
GATW_PUB_DNS=$(nova list |grep gateway | awk '{ split($12, v, "="); print $4".demo.com"}')
GATW_PUB_HOST=$(nova list |grep gateway | awk '{ split($12, v, "="); print $4".demo.com"}')
GATW_PRV_HOST=$(nova list |grep gateway | awk '{ split($12, v, "="); print $4".demo.com"}')

#echo GATW_PRV_IP=$GATW_PRV_IP
#echo GATW_PUB_IP=$GATW_PUB_IP
#echo GATW_PRV_DNS=$GATW_PRV_DNS
#echo GATW_PUB_DNS=$GATW_PUB_DNS
#echo GATW_PUB_HOST=$GATW_PUB_HOST
#echo GATW_PRV_HOST=$GATW_PRV_HOST

[ "$GATW_PRV_IP" ] || IP_WARNING+=("GATW_PRV_IP")
[ "$GATW_PUB_IP" ] || IP_WARNING+=("GATW_PUB_IP")
 [ "$GATW_PRV_DNS" ] || IP_WARNING+=("GATW_PRV_DNS")
 [ "$GATW_PUB_DNS" ] || IP_WARNING+=("GATW_PUB_DNS")
 [ "$GATW_PUB_HOST" ] || IP_WARNING+=("GATW_PUB_HOST")
 [ "$GATW_PRV_HOST" ] || IP_WARNING+=("GATW_PRV_HOST")

AD_SERVER_ENABLED=True
if [[ "$AD_SERVER_ENABLED" == "True" ]]; then
   AD_INSTANCE_ID=`nova list |grep adserver | awk '{print $1}'`
   AD_PRV_IP=$(nova list |grep adserver | awk '{ split($12, v, "="); print v[2]}')
   AD_PUB_IP=$(nova list |grep adserver | awk '{ split($12, v, "="); print v[2]}')
else
   AD_INSTANCE_ID=""
fi
AD_PRV_IP=$(nova list |grep adserver | awk '{ split($12, v, "="); print v[2]}')
AD_MEMBER_GROUP=DemoTenantUsers
AD_ADMIN_GROUP=DemoTenantAdmins

#echo AD_PRV_IP=$AD_PRV_IP
CREATE_EIP_GATEWAY=True




RDP_SERVER_ENABLED=False
#RDP_SERVER_OPERATING_SYSTEM=$(echo $OUTPUT_JSON | python3 -c 'import json,sys;obj=json.load(sys.stdin);print (obj["rdp_server_operating_system"]["value"])')
#CREATE_EIP_RDP_LINUX_SERVER=$(echo $OUTPUT_JSON | python3 -c 'import json,sys;obj=json.load(sys.stdin);print (obj["create_eip_rdp_linux_server"]["value"])')

if [[ "$RDP_SERVER_ENABLED" == "True" ]]; then
   RDP_INSTANCE_ID=$(echo $OUTPUT_JSON | python3 -c 'import json,sys;obj=json.load(sys.stdin);print (obj["rdp_server_instance_id"]["value"])')
   RDP_PRV_IP=$(echo $OUTPUT_JSON | python3 -c 'import json,sys;obj=json.load(sys.stdin);print (obj["rdp_server_private_ip"]["value"])')
   RDP_PUB_IP=$(echo $OUTPUT_JSON | python3 -c 'import json,sys;obj=json.load(sys.stdin);print (obj["rdp_server_public_ip"]["value"])')
   RDP_INSTANCE_ID=$(echo $OUTPUT_JSON | python3 -c 'import json,sys;obj=json.load(sys.stdin);print (obj["rdp_server_instance_id"]["value"])')

   if [[ "$RDP_SERVER_OPERATING_SYSTEM" == "LINUX" && ! "$RDP_PUB_IP"  ]]; then
      IP_WARNING+=("RDP_PUB_IP")
   fi
else
   RDP_INSTANCE_ID=""
fi

